#!/bin/bash

### VARIABLES
CONFIG="/root/.config/alpine-linux-pdc/config.yaml"

### APK REPOSITORIES
echo -e "### CONTROLLED BY PDC\n\n#/media/sdb1/apks\nhttp://dl-cdn.alpinelinux.org/alpine/v3.19/main\nhttp://dl-cdn.alpinelinux.org/alpine/v3.19/community\n" > /etc/apk/repositories

### DRIVERS MODULE
echo -e "### DRIVERS MODULE - START ###"
if [[ $(yq eval '.system.drivers.amd // false' /root/.config/alpine-linux-pdc/config.yaml) == true ]]; then
  ### PENDING SUPPORT
  echo -e "DON'T SUPPORT AMD CURRENTLY, NO DEVICES"
elif [[ $(yq eval '.system.drivers.intel // false' /root/.config/alpine-linux-pdc/config.yaml) == true ]]; then
  if [[ -z $(apk list --installed | grep intel-media-driver) ]] || [[ -z $(apk list --installed | grep mesa-dri-gallium) ]]; then
    echo -e "INSTALLING INTEL DRIVERS"
    apk add -U intel-media-driver mesa-dri-gallium --quiet
  else
    echo -e "INTEL DRIVERS INSTALLED, SKIPPING..."
  fi
fi
echo -e "### DRIVERS MODULE - STOP ###"

### NFS MODULE
echo -e "### NFS MODULE - START ###"
if [[ $(yq eval '.system.nfs.enabled // false' /root/.config/alpine-linux-pdc/config.yaml) == true ]]; then
  if [[ -z "$(which nfsstat)" ]]; then
    ### INSTALL NFS-UTILS
    echo -e "INSTALLING NFS-UTILS"
    apk add -U nfs-utils --quiet

    ### ENABLE BOOT START
    echo -e "ENABLE BOOT START"
    rc-update add nfsmount

    ### START SERVICE
    echo -e "START SERVICE"
    rc-service nfsmount start
  else
    echo -e "NFS-UTILS IS ALREADY INSTALLED, SKIPPING..."
  fi

  if [[ $(yq eval '.system.nfs.mounts.media // false' /root/.config/alpine-linux-pdc/config.yaml) == true ]]; then
    if [[ ! -d /mnt/media ]]; then
      ### CREATE BINDING DIRECTORY
      echo -e "CREATING BINDING DIRECTORY"
      mkdir -p /mnt/media
    else
      echo -e "BINDING DIRECTORY EXISTS, SKIPPING..."
    fi

    if [[ -z "$(grep '/mnt/media ' /proc/mounts)" ]]; then
      if [[ -z "$(grep '/mnt/media' /etc/fstab)" ]]; then
        ### CREATE NFS MOUNT ENTRY IN FSTAB
        echo -e "ADDING NFS MOUNT IN FSTAB"
        echo -e "$(yq eval '.system.nfs.address // ""' /root/.config/alpine-linux-pdc/config.yaml):/volume1/media /mnt/media nfs rw,vers=4,rsize=32768,wsize=32768,soft 0 0" >> /etc/fstab

        ### MOUNT
        echo -e "MOUNTING"
        mount -a
      else
        ### MOUNT
        echo -e "MOUNTING"
        mount -a
      fi
    else
      echo -e "MEDIA MOUNT EXISTS, SKIPPING..."
    fi
  else
    echo -e "SYSTEM.NFS.MOUNTS.MEDIA IS FALSE, SKIPPING..."
  fi
else
  echo -e "SYSTEM.NFS.ENABLED IS FALSE, SKIPPING..."
fi
echo -e "### NFS MODULE - STOP ###"

### TAILSCALE MODULE
echo -e "### TAILSCALE MODULE - START ###"
if [[ $(yq eval '.system.tailscale.enabled // false' $CONFIG) == true ]]; then
  if [[ -z "$(which tailscale)" ]]; then
    echo -e "INSTALLING TAILSCALE"
    apk add -U tailscale --quiet

    echo -e "ENABLE START"
    rc-update add tailscale

    echo -e "START SERVICE"
    rc-service tailscale start
  else
    echo -e "TAILSCALE IS ALREADY INSTALLED, SKIPPING..."
  fi
else
  echo -e "SYSTEM.TAILSCALE.ENABLED IS FALSE, SKIPPING..."
fi
echo -e "### TAILSCALE MODULE - STOP ###"

### DOCKER MODULE
echo -e "### DOCKER MODULE - START ###"
if [[ $(yq eval '.docker.enabled // false' /root/.config/alpine-linux-pdc/config.yaml) == true ]]; then
  ### INSTALL DOCKER
  if [[ -z "$(which docker)" ]]; then
    ### INSTALL DOCKER
    echo -e "INSTALLING DOCKER"
    apk add -U docker --quiet

    ### ENABLE BOOT START
    echo -e "ENABLE BOOT START"
    rc-update add docker boot

    ### START SERVICE
    echo -e "START SERVICE"
    rc-service docker start
  else
    echo -e "DOCKER IS ALREADY INSTALLED, SKIPPING..."
  fi

  ### ADD DOCKER GROUP TO USER
  if [[ -n $(yq eval '.docker.user // ""' /root/.config/alpine-linux-pdc/config.yaml) ]]; then
    if [[ -z $(groups alpine | grep docker) ]]; then
      ### ADD DOCKER GROUP TO USER
      echo -e "ADDING DOCKER GROUP TO $(yq eval '.docker.user // ""' /root/.config/alpine-linux-pdc/config.yaml)"
      addgroup $(yq eval '.docker.user // ""' /root/.config/alpine-linux-pdc/config.yaml) docker
    else
      ### DOCKER GROUP EXISTS FOR USER
      echo -e "DOCKER GROUP EXISTS FOR $(yq eval '.docker.user // ""' /root/.config/alpine-linux-pdc/config.yaml), SKIPPING..."
    fi
  else
    echo -e "DOCKER.USER IS NULL, SKIPPING..."
  fi

  ### INGRESS PROXY NETWORK
  if [[ $(yq eval '.docker.ingress // false' $CONFIG) == true ]]; then
    if [[ -z "$(docker network list --filter 'name=proxy' --quiet)" ]]; then
      echo -e "CREATING PROXY NETWORK"
      docker network create proxy
    else
      echo -e "PROXY NETWORK EXISTS, SKIPPING..."
    fi
  else
    echo -e "DOCKER.INGRESS IS FALSE, SKIPPING..."
  fi

  ### INSTALL PORTAINER
  if [[ $(yq eval '.docker.containers.portainer // false' /root/.config/alpine-linux-pdc/config.yaml) == true ]]; then
    if [[ -z "$(docker container list --filter 'name=portainer' --quiet)" ]]; then
      if [[ -z "$(docker volume list --filter 'name=portainer_data' --quiet)" ]]; then
        ### CREATE PORTAINER_DATA VOLUME
        echo -e "CREATING PORTAINER_DATA VOLUME"
        docker volume create portainer_data
      else
        echo -e "PORTAINER_DATA VOLUME EXISTS, SKIPPING..."
      fi

      ### CREATE PORTAINER CONTAINER
      echo -e "CREATING PORTAINER CONTAINER"
      docker run -d -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data -l com.centurylinklabs.watchtower.enable=true portainer/portainer-ce:latest
    else
      echo -e "PORTAINER CONTAINER EXISTS, SKIPPING..."
    fi
  else
    echo -e "DOCKER.CONTAINERS.PORTAINER IS FALSE, SKIPPING"
  fi
else
  echo -e "DOCKER.ENABLED IS FALSE, SKIPPING..."
fi
echo -e "### DOCKER MODULE - STOP ###"

### NEOFETCH MODULE

### UFW MODULE
